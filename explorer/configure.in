AC_PREREQ(2.54)

dnl ===========================================================================

m4_define(bonobo_activation_minver,    2.1.0)
m4_define(bonobo_minver,               2.1.0)
m4_define(eel_minver,                  2.21.90)
m4_define(glib_minver,                 2.15.6)
m4_define(gnome_desktop_minver,        2.9.91)
m4_define(gnome_minver,                2.14.0)
m4_define(gnome_ui_minver,             2.6.0)
m4_define(orbit_minver,                2.4.0)
m4_define(pango_minver,                1.1.2)
m4_define(gtk_minver,                  2.11.6)
m4_define(rsvg_minver,                 2.0.1)
m4_define(xml_minver,                  2.4.7)
m4_define(startup_notification_minver, 0.8)
m4_define(exif_minver,                 0.5.12)
m4_define(beagle_minver,               0.2.4)
m4_define(tracker_minver,              0.0.1)
m4_define(exempi_minver,               1.99.2)
m4_define(exempi_minver_newapi,        1.99.5)

dnl 1. If the library code has changed at all since last release, then increment revision.
dnl 2. If any interfaces have been added, then increment current and set revision to 0.
dnl Interface break is not allowed.
m4_define(nautilus_extension_current,  2)
m4_define(nautilus_extension_revision, 0)

AC_INIT([nautilus],[2.22.5.1],
        [http://bugzilla.gnome.org/enter_bug.cgi?product=nautilus])

dnl ===========================================================================

AC_CONFIG_SRCDIR(src)
AC_CONFIG_HEADERS(config.h)

AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE
AC_SUBST([ACLOCAL_AMFLAGS], ["\${ACLOCAL_FLAGS}"])

AC_SUBST(BONOBO_ACTIVATION_REQUIRED, [bonobo_activation_minver])
AC_SUBST(BONOBO_REQUIRED, [bonobo_minver])
AC_SUBST(EEL_REQUIRED, [eel_minver])
AC_SUBST(GLIB_REQUIRED, [glib_minver])
AC_SUBST(GNOME_DESKTOP_REQUIRED, [gnome_desktop_minver])
AC_SUBST(GNOME_REQUIRED, [gnome_minver])
AC_SUBST(GNOME_UI_REQUIRED, [gnome_ui_minver])
AC_SUBST(ORBIT_REQUIRED, [orbit_minver])
AC_SUBST(PANGO_REQUIRED, [pango_minver])
AC_SUBST(GTK_REQUIRED, [gtk_minver])
AC_SUBST(RSVG_REQUIRED, [rsvg_minver])
AC_SUBST(XML_REQUIRED, [xml_minver])
AC_SUBST(STARTUP_NOTIFICATION_REQUIRED, [startup_notification_minver])

dnl We need to decrement current by one in the calculation of the age because
dnl the library was started with version "1:0:0" instead of "0:0:0"
AC_SUBST(NAUTILUS_EXTENSION_VERSION_INFO, [nautilus_extension_current]:[nautilus_extension_revision]:`expr [nautilus_extension_current] - 1`)

AC_C_BIGENDIAN
AC_C_CONST
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

if $PKG_CONFIG --atleast-version startup_notification_minver libstartup-notification-1.0; then
  echo "Building with libstartup-notification"
  AC_DEFINE(HAVE_STARTUP_NOTIFICATION, 1,
            [define to enable startup notification support])
  with_startup_notification=yes
  STARTUP_NOTIFICATION_PACKAGE=libstartup-notification-1.0
  EXTRA_CORE_MODULES="$EXTRA_CORE_MODULES libstartup-notification-1.0"
else
  echo "***** WARNING: Building without libstartup-notification"
  with_startup_notification=no
  STARTUP_NOTIFICATION_PACKAGE=
fi

AC_SUBST(STARTUP_NOTIFICATION_PACKAGE)

PKG_CHECK_MODULES(ALL, [
	bonobo-activation-2.0	>= bonobo_activation_minver
	eel-2.0			>= eel_minver
	glib-2.0		>= glib_minver
	gnome-desktop-2.0	>= gnome_desktop_minver
	gio-unix-2.0		
	gio-2.0		
	ORBit-2.0		>= orbit_minver
	pango			>= pango_minver
	gtk+-2.0		>= gtk_minver
	libbonobo-2.0		>= bonobo_minver
	libgnome-2.0		>= gnome_minver
	libgnomeui-2.0		>= gnome_ui_minver
	librsvg-2.0		>= rsvg_minver
	libxml-2.0		>= xml_minver
	$STARTUP_NOTIFICATION_PACKAGE
])
dnl ==========================================================================

GETTEXT_PACKAGE=nautilus
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
                   [the gettext translation domain])

AM_GLIB_GNU_GETTEXT
GLIB_DEFINE_LOCALEDIR(GNOMELOCALEDIR)

IT_PROG_INTLTOOL([0.35.0])

dnl ==========================================================================

ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
 AC_HELP_STRING([--enable-profiler], [Enable profiler]),
 [ENABLE_PROFILER=1
  AC_DEFINE(ENABLE_PROFILER, 1, [define to enable the profiler])])

profiling_support=off
if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES $CFLAGS"
	LDFLAGS="/gnome/GNOME2/lib/libprofiler.so -lpthread $LDFLAGS"
	profiling_support=on
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")

dnl ==========================================================================

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl ==========================================================================

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

dnl ==========================================================================

AC_CHECK_HEADERS(sys/mount.h sys/vfs.h sys/param.h)
			      
dnl ==========================================================================

AC_CHECK_FUNCS(statfs statvfs)
AC_CHECK_HEADERS(sys/statfs.h sys/statvfs.h)

dnl
dnl if statfs() takes 2 arguments or 4 (Solaris)
dnl
if test "$ac_cv_func_statfs" = yes ; then
  AC_MSG_CHECKING([number of arguments to statfs()])
  AC_TRY_COMPILE([#include <unistd.h>
  #ifdef HAVE_SYS_PARAM_H
  #include <sys/param.h>
  #endif
  #ifdef HAVE_SYS_VFS_H
  #include <sys/vfs.h>
  #endif
  #ifdef HAVE_SYS_MOUNT_H
  #include <sys/mount.h>
  #endif
  #ifdef HAVE_SYS_STATFS_H
  #include <sys/statfs.h>
  #endif], [struct statfs st;
  statfs(NULL, &st);],[
    AC_MSG_RESULT([2])
    AC_DEFINE(STATFS_ARGS, 2, [Number of arguments to statfs()])],[
    AC_TRY_COMPILE([#include <unistd.h>
  #ifdef HAVE_SYS_PARAM_H
  #include <sys/param.h>
  #endif
  #ifdef HAVE_SYS_VFS_H
  #include <sys/vfs.h>
  #endif
  #ifdef HAVE_SYS_MOUNT_H
  #include <sys/mount.h>
  #endif
  #ifdef HAVE_SYS_STATFS_H
  #include <sys/statfs.h>
  #endif], [struct statfs st;
  statfs(NULL, &st, sizeof (st), 0);],[
      AC_MSG_RESULT([4])
      AC_DEFINE(STATFS_ARGS, 4, [Number of arguments to statfs()])],[
      AC_MSG_RESULT(unknown)
      AC_MSG_ERROR([unable to determine number of arguments to statfs()])])])
fi dnl test "$ac_cv_func_statfs" = yes

dnl ==========================================================================

dnl X

x_libs="`$PKG_CONFIG --libs pangox`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

x_cflags="`$PKG_CONFIG --cflags pangox`"
x_extra_libs=

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA
 
  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  fi

  x_libs="$X_LIBS -lX11 $X_EXTRA_LIBS"
fi  

## Strip the .la files
 
x_libs_for_checks=$x_libs
#for I in $x_libs ; do
#  case $I in 
#    *.la) ;;
#    *) x_libs_for_checks="$x_libs_for_checks $I" ;;
#  esac
#done

AC_CHECK_LIB(X11, XOpenDisplay, :, 
	AC_MSG_ERROR([*** libX11 not found.  Check 'config.log' for more details.]),
	$x_libs_for_checks) 

dnl ==========================================================================

AM_CONDITIONAL(HAVE_EXIF, false)

dnl libexif checking

PKG_CHECK_MODULES(EXIF, libexif > exif_minver, [
		  AM_CONDITIONAL(HAVE_EXIF, true)
		  AC_DEFINE(HAVE_EXIF, 1, [Define to enable EXIF support])
		  ], [
		  PKG_CHECK_MODULES(EXIF, libexif = exif_minver, [
				    AM_CONDITIONAL(HAVE_EXIF, true)
				    AC_DEFINE(HAVE_OLD_EXIF, 1, [Define if your EXIF library has old API])
				    ], [AM_CONDITIONAL(HAVE_EXIF, false)])
		  ])

AC_SUBST(EXIF_CFLAGS)
AC_SUBST(EXIF_LIBS)

dnl ==========================================================================

dnl exempi checking

PKG_CHECK_MODULES(EXEMPI, exempi-2.0 >= exempi_minver, [
		  AM_CONDITIONAL(HAVE_EXEMPI, true)
		  AC_DEFINE(HAVE_EXEMPI, 1, [Define to enable XMP support])
		  ], [AM_CONDITIONAL(HAVE_EXEMPI, false)])

PKG_CHECK_MODULES(EXEMPI_NEW_API, exempi-2.0 >= exempi_minver_newapi,
		  AC_DEFINE(HAVE_EXEMPI_NEW_API, 1, [Define if we have exempi with the new API]), true)

AC_SUBST(EXEMPI_CFLAGS)
AC_SUBST(EXEMPI_LIBS)

dnl ==========================================================================
dnl search implementations
dnl ****************************

AM_CONDITIONAL(HAVE_TRACKER, false)

dnl libtracker checking
			    			  
AC_ARG_ENABLE(tracker, [  --disable-tracker     build without tracker support])
msg_tracker=no
if test "x$enable_tracker" != "xno"; then
	PKG_CHECK_MODULES(TRACKER, tracker >= tracker_minver, [
		  	  AM_CONDITIONAL(HAVE_TRACKER, true)
			  AC_DEFINE(HAVE_TRACKER, 1, [Define to enable tracker support])
			  ]
                          msg_tracker=yes,
	          	  [AM_CONDITIONAL(HAVE_TRACKER, false)])
        AC_SUBST(TRACKER_CFLAGS)
	AC_SUBST(TRACKER_LIBS)
fi

dnl ==========================================================================


AM_CONDITIONAL(HAVE_BEAGLE, false)

dnl libbeagle checking
			    			  
AC_ARG_ENABLE(beagle, [  --disable-beagle     build without beagle support])
msg_beagle=no
if test "x$enable_beagle" != "xno"; then
	BEAGLE_PKGCONFIG=
	if $PKG_CONFIG --exists libbeagle-1.0; then
		BEAGLE_PKGCONFIG=libbeagle-1.0
	else
		BEAGLE_PKGCONFIG=libbeagle-0.0
	fi

	PKG_CHECK_MODULES(BEAGLE, $BEAGLE_PKGCONFIG >= beagle_minver, [
		  	  AM_CONDITIONAL(HAVE_BEAGLE, true)
			  AC_DEFINE(HAVE_BEAGLE, 1, [Define to enable beagle support])
			  ]
                          msg_beagle=yes,
	          	  [AM_CONDITIONAL(HAVE_BEAGLE, false)])
        AC_SUBST(BEAGLE_CFLAGS)
	AC_SUBST(BEAGLE_LIBS)
fi

dnl ==========================================================================

dnl ****************************
dnl *** Check for libselinux ***
dnl ****************************
    
SELINUX_LIBS=
msg_selinux=no
AC_CHECK_LIB(selinux, is_selinux_enabled,
   [AC_CHECK_HEADERS(selinux/selinux.h,
     [AC_SEARCH_LIBS(selinux_raw_to_trans_context, selinux, 
       [AC_DEFINE(HAVE_SELINUX, 1, [Define to 1 if libselinux is available])
        SELINUX_LIBS="-lselinux"
        msg_selinux=yes])
     ])
   ])
AC_SUBST(SELINUX_LIBS)


AC_ARG_ENABLE(empty_view,
 AC_HELP_STRING([--enable-empty-view], [Enable empty view]),
 [ENABLE_EMPTY_VIEW=1
  AC_DEFINE(ENABLE_EMPTY_VIEW, 1, [define to enable the empty view that is used for performance measurement])])

AC_SUBST(ENABLE_EMPTY_VIEW)
AM_CONDITIONAL(ENABLE_EMPTY_VIEW, test "x$ENABLE_EMPTY_VIEW" = "x1")

dnl ==========================================================================

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
AC_HELP_STRING([--enable-more-warnings], [Maximum compiler warnings]),
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	WARNING_CFLAGS="\
	-Wall \
	-Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align \
	-Werror"

	for option in -Wstrict-aliasing=0 -Wno-pointer-sign; do
		SAVE_CFLAGS="$WARNING_CFLAGS"
		WARNING_CFLAGS="$WARNING_CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			WARNING_CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi

dnl ==========================================================================

dnl gsequence
GSEQUENCE_MODULES="glib-2.0"
GSEQUENCE_CFLAGS="`$PKG_CONFIG --cflags $GSEQUENCE_MODULES`"
AC_SUBST(GSEQUENCE_CFLAGS)
	
dnl libegg
LIBEGG_MODULES="gtk+-2.0 libgnome-2.0"
LIBEGG_CFLAGS="`$PKG_CONFIG --cflags $LIBEGG_MODULES`"
AC_SUBST(LIBEGG_CFLAGS)

# check for gsequence in glib
PKG_CHECK_EXISTS([glib-2.0 >= 2.13.0],[have_glib_2_14=yes],[have_glib_2_14=no])
AM_CONDITIONAL([HAVE_GLIB_2_14],[test "$have_glib_2_14" = "yes"])

dnl libnautilus-extension
LIBNAUTILUS_EXTENSION_MODULES="glib-2.0 gtk+-2.0"
LIBNAUTILUS_EXTENSION_CFLAGS="`$PKG_CONFIG --cflags $LIBNAUTILUS_EXTENSION_MODULES` $WARNING_CFLAGS"
AC_SUBST(LIBNAUTILUS_EXTENSION_CFLAGS)
LIBNAUTILUS_EXTENSION_LIBS="`$PKG_CONFIG --libs $LIBNAUTILUS_EXTENSION_MODULES`"
AC_SUBST(LIBNAUTILUS_EXTENSION_LIBS)

dnl core nautilus (must list bonobo-activation and libbonobo because idldir does not respect "requires")
CORE_MODULES="eel-2.0 librsvg-2.0 bonobo-activation-2.0 libbonobo-2.0 gnome-desktop-2.0 gio-2.0 gio-unix-2.0 $EXTRA_CORE_MODULES"
CORE_CFLAGS="`$PKG_CONFIG --cflags $CORE_MODULES` $x_cflags $WARNING_CFLAGS"
AC_SUBST(CORE_CFLAGS)
CORE_LIBS="`$PKG_CONFIG --libs $CORE_MODULES` $x_libs"
AC_SUBST(CORE_LIBS)
CORE_IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $CORE_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(CORE_IDL_INCLUDES)

DISABLE_DEPRECATED_CFLAGS="-DG_DISABLE_DEPRECATED"

dnl Multimedia keys
AC_CHECK_HEADERS([X11/XF86keysym.h])


dnl Taken out for now
dnl	-DGDK_DISABLE_DEPRECATED \
dnl	-DGDK_PIXBUF_DISABLE_DEPRECATED \
dnl	-DGTK_DISABLE_DEPRECATED \
dnl	-DGNOME_DISABLE_DEPRECATED"

dnl FIXME: put this back once the registration_id stuff is cleared up.
dnl	-DBONOBO_DISABLE_DEPRECATED

AC_SUBST(DISABLE_DEPRECATED_CFLAGS)

dnl libbackground
PKG_CHECK_MODULES(LIBBACKGROUND, "gtk+-2.0 gconf-2.0 libgnomeui-2.0")
dnl ==========================================================================

dnl ==============================================
dnl Special GConf section 
dnl ==============================================

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

dnl ==========================================================================

AC_PATH_PROG(UPDATE_MIME_DATABASE, update-mime-database, no)

AC_ARG_ENABLE(update-mimedb,
   AC_HELP_STRING([--disable-update-mimedb],
                   [disable the update-mime-database after install [default=no]]),,
    enable_update_mimedb=yes)
AM_CONDITIONAL(ENABLE_UPDATE_MIMEDB, test x$enable_update_mimedb = xyes)

	
AC_CONFIG_FILES([
Makefile
cut-n-paste-code/Makefile
cut-n-paste-code/libegg/Makefile
cut-n-paste-code/gsequence/Makefile
cut-n-paste-code/widgets/Makefile
data/Makefile
data/icons/Makefile
data/icons/16x16/Makefile
data/icons/16x16/apps/Makefile
data/icons/22x22/Makefile
data/icons/22x22/apps/Makefile
data/icons/24x24/Makefile
data/icons/24x24/apps/Makefile
data/icons/32x32/Makefile
data/icons/32x32/apps/Makefile
data/icons/scalable/Makefile
data/icons/scalable/apps/Makefile
data/patterns/Makefile
docs/Makefile
icons/Makefile
libnautilus-private/Makefile
libnautilus-extension/Makefile
libnautilus-extension/libnautilus-extension.pc
libnautilus-extension/libnautilus-extension-uninstalled.pc
nautilus.spec
nautilus-computer.desktop.in
nautilus-file-management-properties.desktop.in
nautilus-home.desktop.in
nautilus.desktop.in
nautilus-folder-handler.desktop.in
nautilus-autorun-software.desktop.in
po/Makefile.in
src/Makefile
src/file-manager/Makefile
test/Makefile
])

AC_OUTPUT

dnl ==========================================================================
echo "
nautilus-$VERSION:

	prefix:                 ${prefix}
	source code location:	${srcdir}
	compiler:		${CC}
	tracker support:	$msg_tracker
	beagle support:		$msg_beagle

	profiling support:      ${profiling_support}
"
